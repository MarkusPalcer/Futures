<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;

namespace Futures
{
    public static partial class Future
    {

        public static Func<IFuture<TOut>> Wrap<TIn, TOut>(
            this Func<IFuture<TIn>>  factory,
            Func<IFuture<TIn>, IFuture<TOut>> wrapper)
        {
            return () =>
            {
                try
                {
                    return wrapper(factory());
                }
                catch (Exception ex)
                {
                    return Fail<TOut>(ex);
                }
            };
        }

<#
foreach (var parameterCount in Enumerable.Range(1,15))
{  

var parameterEnumerable = Enumerable.Range(1, parameterCount);
var factoryArgumentList = string.Join(",", parameterEnumerable.Select(x => string.Format("factoryArgument{0}", x)));
var typeParameterList = string.Join(",", parameterEnumerable.Select(x => string.Format("T{0}", x)));

#>

        public static Func<<#= typeParameterList #>, IFuture<TOut>> Wrap<<#= typeParameterList #>, TIn, TOut>(
            this Func<<#= typeParameterList #>, IFuture<TIn>> factory,
            Func<IFuture<TIn>, IFuture<TOut>> wrapper)
        {
            return (<#= factoryArgumentList #>) =>
            {
                try
                {
                    return wrapper(factory(<#= factoryArgumentList #>));
                }
                catch (Exception ex)
                {
                    return Fail<TOut>(ex);
                }
            };
        }

<# } #>

    }
}